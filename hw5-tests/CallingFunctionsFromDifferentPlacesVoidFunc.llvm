declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
@.zerodiverrorstring  = constant [23 x i8] c"Error division by zero\00"

define void @printi(i32) {
%spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
ret void
}

define void @print(i8*) {
%spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
ret void
}

define void @checkDiv(i32) {
%divcmp = icmp eq i32 %0, 0
br i1 %divcmp, label %EqualZero, label %notEqualZero
EqualZero:
%div_error_str = getelementptr [23 x i8], [23 x i8]* @.zerodiverrorstring, i32 0, i32 0
call void @print(i8* %div_error_str)
call void @exit(i32 -1)
ret void
notEqualZero:
ret void
}

@.w0 = constant [9 x i8]c"funcVoid\00"
@.w1 = constant [11 x i8]c"delimiter1\00"
@.w2 = constant [11 x i8]c"delimiter2\00"
@.w3 = constant [11 x i8]c"delimiter3\00"
@.w4 = constant [11 x i8]c"delimiter4\00"
@.w5 = constant [11 x i8]c"delimiter5\00"
@.w6 = constant [11 x i8]c"delimiter6\00"
@.w7 = constant [11 x i8]c"delimiter7\00"
@.w8 = constant [11 x i8]c"delimiter8\00"
define void @funcVoid() {
%s0 = alloca i32, i32 0
%s1 = alloca i32, i32 0
%s2 = alloca i32, i32 0
%s3 = alloca i32, i32 0
%s4 = alloca i32, i32 0
%s5 = alloca i32, i32 0
%s6 = alloca i32, i32 0
%s7 = alloca i32, i32 0
%s8 = alloca i32, i32 0
%s9 = alloca i32, i32 0
%s10 = alloca i32, i32 0
%s11 = alloca i32, i32 0
%s12 = alloca i32, i32 0
%s13 = alloca i32, i32 0
%s14 = alloca i32, i32 0
%s15 = alloca i32, i32 0
%s16 = alloca i32, i32 0
%s17 = alloca i32, i32 0
%s18 = alloca i32, i32 0
%s19 = alloca i32, i32 0
%s20 = alloca i32, i32 0
%s21 = alloca i32, i32 0
%s22 = alloca i32, i32 0
%s23 = alloca i32, i32 0
%s24 = alloca i32, i32 0
%s25 = alloca i32, i32 0
%s26 = alloca i32, i32 0
%s27 = alloca i32, i32 0
%s28 = alloca i32, i32 0
%s29 = alloca i32, i32 0
%s30 = alloca i32, i32 0
%s31 = alloca i32, i32 0
%s32 = alloca i32, i32 0
%s33 = alloca i32, i32 0
%s34 = alloca i32, i32 0
%s35 = alloca i32, i32 0
%s36 = alloca i32, i32 0
%s37 = alloca i32, i32 0
%s38 = alloca i32, i32 0
%s39 = alloca i32, i32 0
%s40 = alloca i32, i32 0
%s41 = alloca i32, i32 0
%s42 = alloca i32, i32 0
%s43 = alloca i32, i32 0
%s44 = alloca i32, i32 0
%s45 = alloca i32, i32 0
%s46 = alloca i32, i32 0
%s47 = alloca i32, i32 0
%s48 = alloca i32, i32 0
%s49 = alloca i32, i32 0
%w0 = getelementptr [9 x i8], [9 x i8]* @.w0, i32 0, i32 0
call void @print(i8* %w0)
ret void
}

define void @main() {
%s0 = alloca i32, i32 0
%s1 = alloca i32, i32 0
%s2 = alloca i32, i32 0
%s3 = alloca i32, i32 0
%s4 = alloca i32, i32 0
%s5 = alloca i32, i32 0
%s6 = alloca i32, i32 0
%s7 = alloca i32, i32 0
%s8 = alloca i32, i32 0
%s9 = alloca i32, i32 0
%s10 = alloca i32, i32 0
%s11 = alloca i32, i32 0
%s12 = alloca i32, i32 0
%s13 = alloca i32, i32 0
%s14 = alloca i32, i32 0
%s15 = alloca i32, i32 0
%s16 = alloca i32, i32 0
%s17 = alloca i32, i32 0
%s18 = alloca i32, i32 0
%s19 = alloca i32, i32 0
%s20 = alloca i32, i32 0
%s21 = alloca i32, i32 0
%s22 = alloca i32, i32 0
%s23 = alloca i32, i32 0
%s24 = alloca i32, i32 0
%s25 = alloca i32, i32 0
%s26 = alloca i32, i32 0
%s27 = alloca i32, i32 0
%s28 = alloca i32, i32 0
%s29 = alloca i32, i32 0
%s30 = alloca i32, i32 0
%s31 = alloca i32, i32 0
%s32 = alloca i32, i32 0
%s33 = alloca i32, i32 0
%s34 = alloca i32, i32 0
%s35 = alloca i32, i32 0
%s36 = alloca i32, i32 0
%s37 = alloca i32, i32 0
%s38 = alloca i32, i32 0
%s39 = alloca i32, i32 0
%s40 = alloca i32, i32 0
%s41 = alloca i32, i32 0
%s42 = alloca i32, i32 0
%s43 = alloca i32, i32 0
%s44 = alloca i32, i32 0
%s45 = alloca i32, i32 0
%s46 = alloca i32, i32 0
%s47 = alloca i32, i32 0
%s48 = alloca i32, i32 0
%s49 = alloca i32, i32 0
call void @funcVoid()
%w1 = getelementptr [11 x i8], [11 x i8]* @.w1, i32 0, i32 0
call void @print(i8* %w1)
%t_1 = add i32 0, 0
store i32 %t_1, i32* %s0
call void @funcVoid()
%w2 = getelementptr [11 x i8], [11 x i8]* @.w2, i32 0, i32 0
call void @print(i8* %w2)
%t_2 = icmp ne i32 0, 1
br i1 %t_2, label %label_113, label %label_116
label_113:
call void @funcVoid()
br label %label_116
label_116:
%w3 = getelementptr [11 x i8], [11 x i8]* @.w3, i32 0, i32 0
call void @print(i8* %w3)
%t_3 = icmp ne i32 0, 1
br i1 %t_3, label %label_120, label %label_123
label_120:
call void @funcVoid()
br label %label_123
label_123:
%w4 = getelementptr [11 x i8], [11 x i8]* @.w4, i32 0, i32 0
call void @print(i8* %w4)
br label %label_126
label_126:
%t_4 = trunc i32 1 to i1
br i1 %t_4, label %label_128, label %label_132
label_128:
call void @funcVoid()
br label %label_132
br label %label_126
label_132:
%w5 = getelementptr [11 x i8], [11 x i8]* @.w5, i32 0, i32 0
call void @print(i8* %w5)
%t_5 = add i32 2, 0
store i32 %t_5, i32* %s1
%t_6 = load i32, i32* %s1
%t_7 = icmp eq i32 %t_6, 2
%t_8 = zext i1 %t_7 to i32
%t_9 = icmp ne i32 0, %t_8
br i1 %t_9, label %label_140, label %label_143
label_140:
call void @funcVoid()
br label %label_143
label_143:
%w6 = getelementptr [11 x i8], [11 x i8]* @.w6, i32 0, i32 0
call void @print(i8* %w6)
%t_10 = load i32, i32* %s1
%t_11 = icmp eq i32 %t_10, 2
%t_12 = zext i1 %t_11 to i32
%t_13 = icmp ne i32 0, %t_12
br i1 %t_13, label %label_149, label %label_152
label_149:
call void @funcVoid()
br label %label_152
label_152:
%w7 = getelementptr [11 x i8], [11 x i8]* @.w7, i32 0, i32 0
call void @print(i8* %w7)
%t_14 = trunc i32 2 to i8
%t_15 = zext i8 %t_14 to i32
store i32 %t_15, i32* %s2
%t_16 = load i32, i32* %s2
%t_17 = icmp eq i32 %t_16, 2
%t_18 = zext i1 %t_17 to i32
%t_19 = icmp ne i32 0, %t_18
br i1 %t_19, label %label_160, label %label_163
label_160:
call void @funcVoid()
br label %label_163
label_163:
%w8 = getelementptr [11 x i8], [11 x i8]* @.w8, i32 0, i32 0
call void @print(i8* %w8)
%t_20 = load i32, i32* %s2
%t_21 = icmp eq i32 %t_20, 2
%t_22 = zext i1 %t_21 to i32
%t_23 = icmp ne i32 0, %t_22
br i1 %t_23, label %label_169, label %label_172
label_169:
call void @funcVoid()
br label %label_172
label_172:
ret void
}

