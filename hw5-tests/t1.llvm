==id==
==string==
++++++++++
==string==
++++++++++
==func decl==
==true==
++++++++++
==false==
++++++++++
==true==
==string==
++++++++++
==if statement==
==false==
==false==
==true==
==and==
==OR==
==start OR==
==end OR==
==string==
++++++++++
==if statement==
==func decl==
==end of program==
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
@.zerodiverrorstring  = constant [23 x i8] c"Error division by zero\00"

define void @printi(i32) {
%spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
ret void
}

define void @print(i8*) {
%spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
ret void
}

define void @checkDiv(i32) {
%divcmp = icmp eq i32 %0, 0
br i1 %divcmp, label %EqualZero, label %notEqualZero
EqualZero:
%div_error_str = getelementptr [23 x i8], [23 x i8]* @.zerodiverrorstring, i32 0, i32 0
call void @print(i8* %div_error_str)
call void @exit(i32 -1)
ret void
notEqualZero:
ret void
}

@.w0 = constant [12 x i8]c"val is true\00"
@.w1 = constant [13 x i8]c"val is false\00"
@.w2 = constant [5 x i8]c"true\00"
@.w3 = constant [5 x i8]c"true\00"
define void @printByValue(i32) {
%s0 = alloca i32, i32 0
%s1 = alloca i32, i32 0
%s2 = alloca i32, i32 0
%s3 = alloca i32, i32 0
%s4 = alloca i32, i32 0
%s5 = alloca i32, i32 0
%s6 = alloca i32, i32 0
%s7 = alloca i32, i32 0
%s8 = alloca i32, i32 0
%s9 = alloca i32, i32 0
%s10 = alloca i32, i32 0
%s11 = alloca i32, i32 0
%s12 = alloca i32, i32 0
%s13 = alloca i32, i32 0
%s14 = alloca i32, i32 0
%s15 = alloca i32, i32 0
%s16 = alloca i32, i32 0
%s17 = alloca i32, i32 0
%s18 = alloca i32, i32 0
%s19 = alloca i32, i32 0
%s20 = alloca i32, i32 0
%s21 = alloca i32, i32 0
%s22 = alloca i32, i32 0
%s23 = alloca i32, i32 0
%s24 = alloca i32, i32 0
%s25 = alloca i32, i32 0
%s26 = alloca i32, i32 0
%s27 = alloca i32, i32 0
%s28 = alloca i32, i32 0
%s29 = alloca i32, i32 0
%s30 = alloca i32, i32 0
%s31 = alloca i32, i32 0
%s32 = alloca i32, i32 0
%s33 = alloca i32, i32 0
%s34 = alloca i32, i32 0
%s35 = alloca i32, i32 0
%s36 = alloca i32, i32 0
%s37 = alloca i32, i32 0
%s38 = alloca i32, i32 0
%s39 = alloca i32, i32 0
%s40 = alloca i32, i32 0
%s41 = alloca i32, i32 0
%s42 = alloca i32, i32 0
%s43 = alloca i32, i32 0
%s44 = alloca i32, i32 0
%s45 = alloca i32, i32 0
%s46 = alloca i32, i32 0
%s47 = alloca i32, i32 0
%s48 = alloca i32, i32 0
%s49 = alloca i32, i32 0
%t_1 = icmp ne i32 0, %0
br i1 %t_1, label %label_53, label %label_57
label_53:
%w0 = getelementptr [12 x i8], [12 x i8]* @.w0, i32 0, i32 0
call void @print(i8* %w0)
br label %label_60
br label %label_57
label_57:
%w1 = getelementptr [13 x i8], [13 x i8]* @.w1, i32 0, i32 0
call void @print(i8* %w1)
br label %label_60
label_60:
ret void
}

define void @main() {
%s0 = alloca i32, i32 0
%s1 = alloca i32, i32 0
%s2 = alloca i32, i32 0
%s3 = alloca i32, i32 0
%s4 = alloca i32, i32 0
%s5 = alloca i32, i32 0
%s6 = alloca i32, i32 0
%s7 = alloca i32, i32 0
%s8 = alloca i32, i32 0
%s9 = alloca i32, i32 0
%s10 = alloca i32, i32 0
%s11 = alloca i32, i32 0
%s12 = alloca i32, i32 0
%s13 = alloca i32, i32 0
%s14 = alloca i32, i32 0
%s15 = alloca i32, i32 0
%s16 = alloca i32, i32 0
%s17 = alloca i32, i32 0
%s18 = alloca i32, i32 0
%s19 = alloca i32, i32 0
%s20 = alloca i32, i32 0
%s21 = alloca i32, i32 0
%s22 = alloca i32, i32 0
%s23 = alloca i32, i32 0
%s24 = alloca i32, i32 0
%s25 = alloca i32, i32 0
%s26 = alloca i32, i32 0
%s27 = alloca i32, i32 0
%s28 = alloca i32, i32 0
%s29 = alloca i32, i32 0
%s30 = alloca i32, i32 0
%s31 = alloca i32, i32 0
%s32 = alloca i32, i32 0
%s33 = alloca i32, i32 0
%s34 = alloca i32, i32 0
%s35 = alloca i32, i32 0
%s36 = alloca i32, i32 0
%s37 = alloca i32, i32 0
%s38 = alloca i32, i32 0
%s39 = alloca i32, i32 0
%s40 = alloca i32, i32 0
%s41 = alloca i32, i32 0
%s42 = alloca i32, i32 0
%s43 = alloca i32, i32 0
%s44 = alloca i32, i32 0
%s45 = alloca i32, i32 0
%s46 = alloca i32, i32 0
%s47 = alloca i32, i32 0
%s48 = alloca i32, i32 0
%s49 = alloca i32, i32 0
call void @printByValue(i32 1)
call void @printByValue(i32 0)
%t_2 = icmp ne i32 0, 1
br i1 %t_2, label %label_118, label %label_121
label_118:
%w2 = getelementptr [5 x i8], [5 x i8]* @.w2, i32 0, i32 0
call void @print(i8* %w2)
br label %label_121
label_121:
br label %label_137
label_123:
br label %label_127
label_125:
br label %label_131
label_127:
%t_3 = icmp eq i32 0, 0
br i1 %t_3, label %label_134, label %label_125
br label %label_131
label_131:
%t_4 = icmp ne i32 1, 0
%t_5 = zext i1 %t_4 to i32
br label %label_134
label_134:
%t_6 = phi i32 [0, %label_127], [%t_5, %label_131]
br label %label_141
label_137:
%t_7 = icmp ne i32 0, 0
br i1 %t_7, label %label_144, label %label_123
br label %label_141
label_141:
%t_8 = icmp ne i32 %t_6, 0
%t_9 = zext i1 %t_8 to i32
br label %label_144
label_144:
%t_10 = phi i32 [1, %label_137], [%t_9, %label_141]
%t_11 = icmp ne i32 0, %t_10
br i1 %t_11, label %label_148, label %label_151
label_148:
%w3 = getelementptr [5 x i8], [5 x i8]* @.w3, i32 0, i32 0
call void @print(i8* %w3)
br label %label_151
label_151:
ret void
}

