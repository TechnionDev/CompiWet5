declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
@.zerodiverrorstring  = constant [23 x i8] c"Error division by zero\00"

define void @printi(i32) {
%spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
ret void
}

define void @print(i8*) {
%spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
ret void
}

define void @checkDiv(i32) {
%divcmp = icmp eq i32 %0, 0
br i1 %divcmp, label %EqualZero, label %notEqualZero
EqualZero:
%div_error_str = getelementptr [23 x i8], [23 x i8]* @.zerodiverrorstring, i32 0, i32 0
call void @print(i8* %div_error_str)
call void @exit(i32 -1)
ret void
notEqualZero:
ret void
}

@.w0 = constant [8 x i8]c"Res is \00"
define void @main() {
%s0 = alloca i32, i32 0
%s1 = alloca i32, i32 0
%s2 = alloca i32, i32 0
%s3 = alloca i32, i32 0
%s4 = alloca i32, i32 0
%s5 = alloca i32, i32 0
%s6 = alloca i32, i32 0
%s7 = alloca i32, i32 0
%s8 = alloca i32, i32 0
%s9 = alloca i32, i32 0
%s10 = alloca i32, i32 0
%s11 = alloca i32, i32 0
%s12 = alloca i32, i32 0
%s13 = alloca i32, i32 0
%s14 = alloca i32, i32 0
%s15 = alloca i32, i32 0
%s16 = alloca i32, i32 0
%s17 = alloca i32, i32 0
%s18 = alloca i32, i32 0
%s19 = alloca i32, i32 0
%s20 = alloca i32, i32 0
%s21 = alloca i32, i32 0
%s22 = alloca i32, i32 0
%s23 = alloca i32, i32 0
%s24 = alloca i32, i32 0
%s25 = alloca i32, i32 0
%s26 = alloca i32, i32 0
%s27 = alloca i32, i32 0
%s28 = alloca i32, i32 0
%s29 = alloca i32, i32 0
%s30 = alloca i32, i32 0
%s31 = alloca i32, i32 0
%s32 = alloca i32, i32 0
%s33 = alloca i32, i32 0
%s34 = alloca i32, i32 0
%s35 = alloca i32, i32 0
%s36 = alloca i32, i32 0
%s37 = alloca i32, i32 0
%s38 = alloca i32, i32 0
%s39 = alloca i32, i32 0
%s40 = alloca i32, i32 0
%s41 = alloca i32, i32 0
%s42 = alloca i32, i32 0
%s43 = alloca i32, i32 0
%s44 = alloca i32, i32 0
%s45 = alloca i32, i32 0
%s46 = alloca i32, i32 0
%s47 = alloca i32, i32 0
%s48 = alloca i32, i32 0
%s49 = alloca i32, i32 0
%t_1 = add i32 2, 0
store i32 %t_1, i32* %s0
%t_2 = add i32 0, 0
store i32 %t_2, i32* %s1
br label %label_56
label_56:
%t_3 = load i32, i32* %s0
%t_4 = icmp sgt i32 %t_3, 0
%t_5 = zext i1 %t_4 to i32
%t_6 = trunc i32 %t_5 to i1
br i1 %t_6, label %label_60, label %label_98
label_60:
%t_7 = add i32 5, 0
store i32 %t_7, i32* %s2
%t_8 = add i32 1, 0
store i32 %t_8, i32* %s3
br label %label_66
label_66:
%t_9 = trunc i32 1 to i1
br i1 %t_9, label %label_68, label %label_87
label_68:
%t_10 = load i32, i32* %s3
%t_11 = load i32, i32* %s2
%t_12 = mul i32 %t_10, %t_11

%t_13 = add i32 %t_12, 0
store i32 %t_13, i32* %s3
%t_14 = load i32, i32* %s2
%t_15 = sub i32 %t_14, 1

%t_16 = add i32 %t_15, 0
store i32 %t_16, i32* %s2
%t_17 = load i32, i32* %s2
%t_18 = icmp eq i32 %t_17, 1
%t_19 = zext i1 %t_18 to i32
%t_20 = icmp ne i32 0, %t_19
br i1 %t_20, label %label_82, label %label_85
label_82:
br label %label_87
br label %label_85
label_85:
br label %label_66
label_87:
%t_21 = load i32, i32* %s0
%t_22 = sub i32 %t_21, 1

%t_23 = add i32 %t_22, 0
store i32 %t_23, i32* %s0
%t_24 = load i32, i32* %s1
%t_25 = load i32, i32* %s3
%t_26 = add i32 %t_24, %t_25

%t_27 = add i32 %t_26, 0
store i32 %t_27, i32* %s1
br label %label_56
label_98:
%w0 = getelementptr [8 x i8], [8 x i8]* @.w0, i32 0, i32 0
call void @print(i8* %w0)
%t_28 = load i32, i32* %s1
call void @printi(i32 %t_28)
ret void
}

