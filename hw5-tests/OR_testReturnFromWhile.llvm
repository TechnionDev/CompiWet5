==id==
==id==
==true==
==RELOPNONASSOC==
==
==id==
==num==
==dani==
hiiiiiiiiiiiiii
this is first exp type: INT
this is second exp type: INT
==id==
==if statement==
==id==
==num==
==plus==
hiiiiiiiiiiiiii
==id==
==num==
==minus==
hiiiiiiiiiiiiii
!!!!!label_56!!!!!
==func decl==
==id==
==id==
==true==
==RELOPNONASSOC==
==
==id==
==num==
==dani==
hiiiiiiiiiiiiii
this is first exp type: INT
this is second exp type: INT
==id==
==if statement==
==id==
==num b==
==plus==
hiiiiiiiiiiiiii
==id==
==num==
==minus==
hiiiiiiiiiiiiii
!!!!!label_136!!!!!
==func decl==
==id==
==id==
==true==
==RELOPNONASSOC==
==
==id==
==num==
==dani==
hiiiiiiiiiiiiii
this is first exp type: INT
this is second exp type: INT
==RELOPNONASSOC==
==
==id==
==num==
==dani==
hiiiiiiiiiiiiii
this is first exp type: BYTE
this is second exp type: INT
==if statement==
==id==
==num==
==minus==
hiiiiiiiiiiiiii
==id==
==num b==
==minus==
hiiiiiiiiiiiiii
!!!!!label_216!!!!!
==func decl==
==id==
==true==
==RELOPNONASSOC==
==
==id==
==num==
==dani==
hiiiiiiiiiiiiii
this is first exp type: INT
this is second exp type: INT
==if statement==
==string==
++++++++++
==id==
==num==
==minus==
hiiiiiiiiiiiiii
!!!!!label_295!!!!!
==func decl==
==num==
==id==
==num==
+++++%t_64+++++
==call==
==call EXP==
==id==
++++++++++
==num b==
==id==
==num==
+++++%t_70+++++
==call==
==call EXP==
==id==
++++++++++
==string==
++++++++++
==id==
==id==
+++++%t_76+++++
==call==
==call EXP==
==not==
==string==
++++++++++
==if statement==
==string==
++++++++++
==id==
++++++++++
==func decl==
==end of program==
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
@.zerodiverrorstring  = constant [23 x i8] c"Error division by zero\00"

define void @printi(i32) {
%spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
ret void
}

define void @print(i8*) {
%spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
ret void
}

define void @checkDiv(i32) {
%divcmp = icmp eq i32 %0, 0
br i1 %divcmp, label %EqualZero, label %notEqualZero
EqualZero:
%div_error_str = getelementptr [23 x i8], [23 x i8]* @.zerodiverrorstring, i32 0, i32 0
call void @print(i8* %div_error_str)
call void @exit(i32 -1)
ret void
notEqualZero:
ret void
}

@.w0 = constant [6 x i8]c"hello\00"
@.w1 = constant [17 x i8]c"The numbers are \00"
@.w2 = constant [5 x i8]c"not \00"
@.w3 = constant [6 x i8]c"equal\00"
define i32 @addint(i32, i32) {
%s0 = alloca i32, i32 0
%s1 = alloca i32, i32 0
%s2 = alloca i32, i32 0
%s3 = alloca i32, i32 0
%s4 = alloca i32, i32 0
%s5 = alloca i32, i32 0
%s6 = alloca i32, i32 0
%s7 = alloca i32, i32 0
%s8 = alloca i32, i32 0
%s9 = alloca i32, i32 0
%s10 = alloca i32, i32 0
%s11 = alloca i32, i32 0
%s12 = alloca i32, i32 0
%s13 = alloca i32, i32 0
%s14 = alloca i32, i32 0
%s15 = alloca i32, i32 0
%s16 = alloca i32, i32 0
%s17 = alloca i32, i32 0
%s18 = alloca i32, i32 0
%s19 = alloca i32, i32 0
%s20 = alloca i32, i32 0
%s21 = alloca i32, i32 0
%s22 = alloca i32, i32 0
%s23 = alloca i32, i32 0
%s24 = alloca i32, i32 0
%s25 = alloca i32, i32 0
%s26 = alloca i32, i32 0
%s27 = alloca i32, i32 0
%s28 = alloca i32, i32 0
%s29 = alloca i32, i32 0
%s30 = alloca i32, i32 0
%s31 = alloca i32, i32 0
%s32 = alloca i32, i32 0
%s33 = alloca i32, i32 0
%s34 = alloca i32, i32 0
%s35 = alloca i32, i32 0
%s36 = alloca i32, i32 0
%s37 = alloca i32, i32 0
%s38 = alloca i32, i32 0
%s39 = alloca i32, i32 0
%s40 = alloca i32, i32 0
%s41 = alloca i32, i32 0
%s42 = alloca i32, i32 0
%s43 = alloca i32, i32 0
%s44 = alloca i32, i32 0
%s45 = alloca i32, i32 0
%s46 = alloca i32, i32 0
%s47 = alloca i32, i32 0
%s48 = alloca i32, i32 0
%s49 = alloca i32, i32 0
%t_1 = add i32 %0, 0
store i32 %t_1, i32* %s0
%t_2 = add i32 %1, 0
store i32 %t_2, i32* %s1
br label %label_56
label_56:
%t_3 = trunc i32 1 to i1
br i1 %t_3, label %label_58, label %label_77
label_58:
%t_4 = load i32, i32* %s1
%t_5 = icmp eq i32 %t_4, 0
%t_6 = zext i1 %t_5 to i32
%t_7 = icmp ne i32 0, %t_6
br i1 %t_7, label %label_63, label %label_67
label_63:
%t_8 = load i32, i32* %s0
ret i32 %t_8
br label %label_67
label_67:
%t_9 = load i32, i32* %s0
%t_10 = add i32 %t_9, 1

%t_11 = add i32 %t_10, 0
store i32 %t_11, i32* %s0
%t_12 = load i32, i32* %s1
%t_13 = sub i32 %t_12, 1

%t_14 = add i32 %t_13, 0
store i32 %t_14, i32* %s1
br label %label_56
label_77:
ret i32 0
}

define i32 @addByte(i32, i32) {
%s0 = alloca i32, i32 0
%s1 = alloca i32, i32 0
%s2 = alloca i32, i32 0
%s3 = alloca i32, i32 0
%s4 = alloca i32, i32 0
%s5 = alloca i32, i32 0
%s6 = alloca i32, i32 0
%s7 = alloca i32, i32 0
%s8 = alloca i32, i32 0
%s9 = alloca i32, i32 0
%s10 = alloca i32, i32 0
%s11 = alloca i32, i32 0
%s12 = alloca i32, i32 0
%s13 = alloca i32, i32 0
%s14 = alloca i32, i32 0
%s15 = alloca i32, i32 0
%s16 = alloca i32, i32 0
%s17 = alloca i32, i32 0
%s18 = alloca i32, i32 0
%s19 = alloca i32, i32 0
%s20 = alloca i32, i32 0
%s21 = alloca i32, i32 0
%s22 = alloca i32, i32 0
%s23 = alloca i32, i32 0
%s24 = alloca i32, i32 0
%s25 = alloca i32, i32 0
%s26 = alloca i32, i32 0
%s27 = alloca i32, i32 0
%s28 = alloca i32, i32 0
%s29 = alloca i32, i32 0
%s30 = alloca i32, i32 0
%s31 = alloca i32, i32 0
%s32 = alloca i32, i32 0
%s33 = alloca i32, i32 0
%s34 = alloca i32, i32 0
%s35 = alloca i32, i32 0
%s36 = alloca i32, i32 0
%s37 = alloca i32, i32 0
%s38 = alloca i32, i32 0
%s39 = alloca i32, i32 0
%s40 = alloca i32, i32 0
%s41 = alloca i32, i32 0
%s42 = alloca i32, i32 0
%s43 = alloca i32, i32 0
%s44 = alloca i32, i32 0
%s45 = alloca i32, i32 0
%s46 = alloca i32, i32 0
%s47 = alloca i32, i32 0
%s48 = alloca i32, i32 0
%s49 = alloca i32, i32 0
%t_15 = trunc i32 %0 to i8
%t_16 = zext i8 %t_15 to i32
store i32 %t_16, i32* %s0
%t_17 = add i32 %1, 0
store i32 %t_17, i32* %s1
br label %label_136
label_136:
%t_18 = trunc i32 1 to i1
br i1 %t_18, label %label_138, label %label_157
label_138:
%t_19 = load i32, i32* %s1
%t_20 = icmp eq i32 %t_19, 0
%t_21 = zext i1 %t_20 to i32
%t_22 = icmp ne i32 0, %t_21
br i1 %t_22, label %label_143, label %label_147
label_143:
%t_23 = load i32, i32* %s0
ret i32 %t_23
br label %label_147
label_147:
%t_24 = load i32, i32* %s0
%t_25 = add i32 %t_24, 1
%t_26 = trunc i32 %t_25 to i8
%t_27 = zext i8 %t_26 to i32
%t_28 = trunc i32 %t_27 to i8
%t_29 = zext i8 %t_28 to i32
store i32 %t_29, i32* %s0
%t_30 = load i32, i32* %s1
%t_31 = sub i32 %t_30, 1

%t_32 = add i32 %t_31, 0
store i32 %t_32, i32* %s1
br label %label_136
label_157:
ret i32 0
}

define i32 @areEqual(i32, i32) {
%s0 = alloca i32, i32 0
%s1 = alloca i32, i32 0
%s2 = alloca i32, i32 0
%s3 = alloca i32, i32 0
%s4 = alloca i32, i32 0
%s5 = alloca i32, i32 0
%s6 = alloca i32, i32 0
%s7 = alloca i32, i32 0
%s8 = alloca i32, i32 0
%s9 = alloca i32, i32 0
%s10 = alloca i32, i32 0
%s11 = alloca i32, i32 0
%s12 = alloca i32, i32 0
%s13 = alloca i32, i32 0
%s14 = alloca i32, i32 0
%s15 = alloca i32, i32 0
%s16 = alloca i32, i32 0
%s17 = alloca i32, i32 0
%s18 = alloca i32, i32 0
%s19 = alloca i32, i32 0
%s20 = alloca i32, i32 0
%s21 = alloca i32, i32 0
%s22 = alloca i32, i32 0
%s23 = alloca i32, i32 0
%s24 = alloca i32, i32 0
%s25 = alloca i32, i32 0
%s26 = alloca i32, i32 0
%s27 = alloca i32, i32 0
%s28 = alloca i32, i32 0
%s29 = alloca i32, i32 0
%s30 = alloca i32, i32 0
%s31 = alloca i32, i32 0
%s32 = alloca i32, i32 0
%s33 = alloca i32, i32 0
%s34 = alloca i32, i32 0
%s35 = alloca i32, i32 0
%s36 = alloca i32, i32 0
%s37 = alloca i32, i32 0
%s38 = alloca i32, i32 0
%s39 = alloca i32, i32 0
%s40 = alloca i32, i32 0
%s41 = alloca i32, i32 0
%s42 = alloca i32, i32 0
%s43 = alloca i32, i32 0
%s44 = alloca i32, i32 0
%s45 = alloca i32, i32 0
%s46 = alloca i32, i32 0
%s47 = alloca i32, i32 0
%s48 = alloca i32, i32 0
%s49 = alloca i32, i32 0
%t_33 = add i32 %0, 0
store i32 %t_33, i32* %s0
%t_34 = trunc i32 %1 to i8
%t_35 = zext i8 %t_34 to i32
store i32 %t_35, i32* %s1
br label %label_216
label_216:
%t_36 = trunc i32 1 to i1
br i1 %t_36, label %label_218, label %label_238
label_218:
%t_37 = load i32, i32* %s0
%t_38 = icmp eq i32 %t_37, 0
%t_39 = zext i1 %t_38 to i32
%t_40 = icmp ne i32 0, %t_39
br i1 %t_40, label %label_223, label %label_228
label_223:
%t_41 = load i32, i32* %s1
%t_42 = icmp eq i32 %t_41, 0
%t_43 = zext i1 %t_42 to i32
ret i32 %t_43
br label %label_228
label_228:
%t_44 = load i32, i32* %s0
%t_45 = sub i32 %t_44, 1

%t_46 = add i32 %t_45, 0
store i32 %t_46, i32* %s0
%t_47 = load i32, i32* %s1
%t_48 = sub i32 %t_47, 1
%t_49 = trunc i32 %t_48 to i8
%t_50 = zext i8 %t_49 to i32
%t_51 = trunc i32 %t_50 to i8
%t_52 = zext i8 %t_51 to i32
store i32 %t_52, i32* %s1
br label %label_216
label_238:
ret i32 0
}

define void @sayHello(i32) {
%s0 = alloca i32, i32 0
%s1 = alloca i32, i32 0
%s2 = alloca i32, i32 0
%s3 = alloca i32, i32 0
%s4 = alloca i32, i32 0
%s5 = alloca i32, i32 0
%s6 = alloca i32, i32 0
%s7 = alloca i32, i32 0
%s8 = alloca i32, i32 0
%s9 = alloca i32, i32 0
%s10 = alloca i32, i32 0
%s11 = alloca i32, i32 0
%s12 = alloca i32, i32 0
%s13 = alloca i32, i32 0
%s14 = alloca i32, i32 0
%s15 = alloca i32, i32 0
%s16 = alloca i32, i32 0
%s17 = alloca i32, i32 0
%s18 = alloca i32, i32 0
%s19 = alloca i32, i32 0
%s20 = alloca i32, i32 0
%s21 = alloca i32, i32 0
%s22 = alloca i32, i32 0
%s23 = alloca i32, i32 0
%s24 = alloca i32, i32 0
%s25 = alloca i32, i32 0
%s26 = alloca i32, i32 0
%s27 = alloca i32, i32 0
%s28 = alloca i32, i32 0
%s29 = alloca i32, i32 0
%s30 = alloca i32, i32 0
%s31 = alloca i32, i32 0
%s32 = alloca i32, i32 0
%s33 = alloca i32, i32 0
%s34 = alloca i32, i32 0
%s35 = alloca i32, i32 0
%s36 = alloca i32, i32 0
%s37 = alloca i32, i32 0
%s38 = alloca i32, i32 0
%s39 = alloca i32, i32 0
%s40 = alloca i32, i32 0
%s41 = alloca i32, i32 0
%s42 = alloca i32, i32 0
%s43 = alloca i32, i32 0
%s44 = alloca i32, i32 0
%s45 = alloca i32, i32 0
%s46 = alloca i32, i32 0
%s47 = alloca i32, i32 0
%s48 = alloca i32, i32 0
%s49 = alloca i32, i32 0
%t_53 = add i32 %0, 0
store i32 %t_53, i32* %s0
br label %label_295
label_295:
%t_54 = trunc i32 1 to i1
br i1 %t_54, label %label_297, label %label_312
label_297:
%t_55 = load i32, i32* %s0
%t_56 = icmp eq i32 %t_55, 0
%t_57 = zext i1 %t_56 to i32
%t_58 = icmp ne i32 0, %t_57
br i1 %t_58, label %label_302, label %label_305
label_302:
ret void
br label %label_305
label_305:
%w0 = getelementptr [6 x i8], [6 x i8]* @.w0, i32 0, i32 0
call void @print(i8* %w0)
%t_59 = load i32, i32* %s0
%t_60 = sub i32 %t_59, 1

%t_61 = add i32 %t_60, 0
store i32 %t_61, i32* %s0
br label %label_295
label_312:
ret void
}

define void @main() {
%s0 = alloca i32, i32 0
%s1 = alloca i32, i32 0
%s2 = alloca i32, i32 0
%s3 = alloca i32, i32 0
%s4 = alloca i32, i32 0
%s5 = alloca i32, i32 0
%s6 = alloca i32, i32 0
%s7 = alloca i32, i32 0
%s8 = alloca i32, i32 0
%s9 = alloca i32, i32 0
%s10 = alloca i32, i32 0
%s11 = alloca i32, i32 0
%s12 = alloca i32, i32 0
%s13 = alloca i32, i32 0
%s14 = alloca i32, i32 0
%s15 = alloca i32, i32 0
%s16 = alloca i32, i32 0
%s17 = alloca i32, i32 0
%s18 = alloca i32, i32 0
%s19 = alloca i32, i32 0
%s20 = alloca i32, i32 0
%s21 = alloca i32, i32 0
%s22 = alloca i32, i32 0
%s23 = alloca i32, i32 0
%s24 = alloca i32, i32 0
%s25 = alloca i32, i32 0
%s26 = alloca i32, i32 0
%s27 = alloca i32, i32 0
%s28 = alloca i32, i32 0
%s29 = alloca i32, i32 0
%s30 = alloca i32, i32 0
%s31 = alloca i32, i32 0
%s32 = alloca i32, i32 0
%s33 = alloca i32, i32 0
%s34 = alloca i32, i32 0
%s35 = alloca i32, i32 0
%s36 = alloca i32, i32 0
%s37 = alloca i32, i32 0
%s38 = alloca i32, i32 0
%s39 = alloca i32, i32 0
%s40 = alloca i32, i32 0
%s41 = alloca i32, i32 0
%s42 = alloca i32, i32 0
%s43 = alloca i32, i32 0
%s44 = alloca i32, i32 0
%s45 = alloca i32, i32 0
%s46 = alloca i32, i32 0
%s47 = alloca i32, i32 0
%s48 = alloca i32, i32 0
%s49 = alloca i32, i32 0
%t_62 = add i32 0, 0
store i32 %t_62, i32* %s0
%t_63 = load i32, i32* %s0
%t_64 = call i32 @addint(i32 %t_63, i32 5)
%t_65 = add i32 %t_64, 0
store i32 %t_65, i32* %s0
%t_66 = load i32, i32* %s0
call void @printi(i32 %t_66)
%t_67 = trunc i32 0 to i8
%t_68 = zext i8 %t_67 to i32
store i32 %t_68, i32* %s1
%t_69 = load i32, i32* %s1
%t_70 = call i32 @addByte(i32 %t_69, i32 5)
%t_71 = trunc i32 %t_70 to i8
%t_72 = zext i8 %t_71 to i32
store i32 %t_72, i32* %s1
%t_73 = load i32, i32* %s1
call void @printi(i32 %t_73)
%w1 = getelementptr [17 x i8], [17 x i8]* @.w1, i32 0, i32 0
call void @print(i8* %w1)
%t_74 = load i32, i32* %s1
%t_75 = load i32, i32* %s0
%t_76 = call i32 @areEqual(i32 %t_75, i32 %t_74)
%t_77 = sub i32 1, %t_76
%t_78 = icmp ne i32 0, %t_77
br i1 %t_78, label %label_389, label %label_392
label_389:
%w2 = getelementptr [5 x i8], [5 x i8]* @.w2, i32 0, i32 0
call void @print(i8* %w2)
br label %label_392
label_392:
%w3 = getelementptr [6 x i8], [6 x i8]* @.w3, i32 0, i32 0
call void @print(i8* %w3)
%t_79 = load i32, i32* %s0
call void @sayHello(i32 %t_79)
ret void
}

