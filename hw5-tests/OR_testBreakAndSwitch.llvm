==id==
++++++++++
==func decl==
==string==
++++++++++
==num==
==true==
==RELOPNONASSOC==
==
==id==
==num==
==dani==
hiiiiiiiiiiiiii
this is first exp type: INT
this is second exp type: INT
==num==
++++++++++
==id==
==num==
==minus==
hiiiiiiiiiiiiii
==if statement==
==RELOPNONASSOC==
==
==id==
==num==
==dani==
hiiiiiiiiiiiiii
this is first exp type: INT
this is second exp type: INT
==num==
++++++++++
==id==
==num==
==minus==
hiiiiiiiiiiiiii
==if statement==
==RELOPNONASSOC==
==
==id==
==num==
==dani==
hiiiiiiiiiiiiii
this is first exp type: INT
this is second exp type: INT
==num==
++++++++++
==id==
==num==
==minus==
hiiiiiiiiiiiiii
==if statement==
==RELOPNONASSOC==
==
==id==
==num==
==dani==
hiiiiiiiiiiiiii
this is first exp type: INT
this is second exp type: INT
==num==
++++++++++
==id==
==num==
==minus==
hiiiiiiiiiiiiii
==if statement==
==RELOPNONASSOC==
==
==id==
==num==
==dani==
hiiiiiiiiiiiiii
this is first exp type: INT
this is second exp type: INT
==num==
++++++++++
==id==
==num==
==minus==
hiiiiiiiiiiiiii
==if statement==
!!!!!label_109!!!!!
==string==
++++++++++
==num b==
==true==
==RELOPNONASSOC==
==
==id==
==num b==
==dani==
hiiiiiiiiiiiiii
this is first exp type: BYTE
this is second exp type: BYTE
==num==
++++++++++
==id==
==num b==
==minus==
hiiiiiiiiiiiiii
==if statement==
==RELOPNONASSOC==
==
==id==
==num b==
==dani==
hiiiiiiiiiiiiii
this is first exp type: BYTE
this is second exp type: BYTE
==num==
++++++++++
==id==
==num b==
==minus==
hiiiiiiiiiiiiii
==if statement==
==RELOPNONASSOC==
==
==id==
==num b==
==dani==
hiiiiiiiiiiiiii
this is first exp type: BYTE
this is second exp type: BYTE
==num==
++++++++++
==id==
==num b==
==minus==
hiiiiiiiiiiiiii
==if statement==
==RELOPNONASSOC==
==
==id==
==num b==
==dani==
hiiiiiiiiiiiiii
this is first exp type: BYTE
this is second exp type: BYTE
==num==
++++++++++
==id==
==num b==
==minus==
hiiiiiiiiiiiiii
==if statement==
==RELOPNONASSOC==
==
==id==
==num b==
==dani==
hiiiiiiiiiiiiii
this is first exp type: BYTE
this is second exp type: BYTE
==num==
++++++++++
==id==
==num b==
==minus==
hiiiiiiiiiiiiii
==if statement==
!!!!!label_179!!!!!
==func decl==
==end of program==
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
@.zerodiverrorstring  = constant [23 x i8] c"Error division by zero\00"

define void @printi(i32) {
%spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
ret void
}

define void @print(i8*) {
%spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
ret void
}

define void @checkDiv(i32) {
%divcmp = icmp eq i32 %0, 0
br i1 %divcmp, label %EqualZero, label %notEqualZero
EqualZero:
%div_error_str = getelementptr [23 x i8], [23 x i8]* @.zerodiverrorstring, i32 0, i32 0
call void @print(i8* %div_error_str)
call void @exit(i32 -1)
ret void
notEqualZero:
ret void
}

@.w0 = constant [10 x i8]c"test int:\00"
@.w1 = constant [11 x i8]c"test byte:\00"
define void @printNum(i32) {
%s0 = alloca i32, i32 0
%s1 = alloca i32, i32 0
%s2 = alloca i32, i32 0
%s3 = alloca i32, i32 0
%s4 = alloca i32, i32 0
%s5 = alloca i32, i32 0
%s6 = alloca i32, i32 0
%s7 = alloca i32, i32 0
%s8 = alloca i32, i32 0
%s9 = alloca i32, i32 0
%s10 = alloca i32, i32 0
%s11 = alloca i32, i32 0
%s12 = alloca i32, i32 0
%s13 = alloca i32, i32 0
%s14 = alloca i32, i32 0
%s15 = alloca i32, i32 0
%s16 = alloca i32, i32 0
%s17 = alloca i32, i32 0
%s18 = alloca i32, i32 0
%s19 = alloca i32, i32 0
%s20 = alloca i32, i32 0
%s21 = alloca i32, i32 0
%s22 = alloca i32, i32 0
%s23 = alloca i32, i32 0
%s24 = alloca i32, i32 0
%s25 = alloca i32, i32 0
%s26 = alloca i32, i32 0
%s27 = alloca i32, i32 0
%s28 = alloca i32, i32 0
%s29 = alloca i32, i32 0
%s30 = alloca i32, i32 0
%s31 = alloca i32, i32 0
%s32 = alloca i32, i32 0
%s33 = alloca i32, i32 0
%s34 = alloca i32, i32 0
%s35 = alloca i32, i32 0
%s36 = alloca i32, i32 0
%s37 = alloca i32, i32 0
%s38 = alloca i32, i32 0
%s39 = alloca i32, i32 0
%s40 = alloca i32, i32 0
%s41 = alloca i32, i32 0
%s42 = alloca i32, i32 0
%s43 = alloca i32, i32 0
%s44 = alloca i32, i32 0
%s45 = alloca i32, i32 0
%s46 = alloca i32, i32 0
%s47 = alloca i32, i32 0
%s48 = alloca i32, i32 0
%s49 = alloca i32, i32 0
call void @printi(i32 %0)
ret void
}

define void @main() {
%s0 = alloca i32, i32 0
%s1 = alloca i32, i32 0
%s2 = alloca i32, i32 0
%s3 = alloca i32, i32 0
%s4 = alloca i32, i32 0
%s5 = alloca i32, i32 0
%s6 = alloca i32, i32 0
%s7 = alloca i32, i32 0
%s8 = alloca i32, i32 0
%s9 = alloca i32, i32 0
%s10 = alloca i32, i32 0
%s11 = alloca i32, i32 0
%s12 = alloca i32, i32 0
%s13 = alloca i32, i32 0
%s14 = alloca i32, i32 0
%s15 = alloca i32, i32 0
%s16 = alloca i32, i32 0
%s17 = alloca i32, i32 0
%s18 = alloca i32, i32 0
%s19 = alloca i32, i32 0
%s20 = alloca i32, i32 0
%s21 = alloca i32, i32 0
%s22 = alloca i32, i32 0
%s23 = alloca i32, i32 0
%s24 = alloca i32, i32 0
%s25 = alloca i32, i32 0
%s26 = alloca i32, i32 0
%s27 = alloca i32, i32 0
%s28 = alloca i32, i32 0
%s29 = alloca i32, i32 0
%s30 = alloca i32, i32 0
%s31 = alloca i32, i32 0
%s32 = alloca i32, i32 0
%s33 = alloca i32, i32 0
%s34 = alloca i32, i32 0
%s35 = alloca i32, i32 0
%s36 = alloca i32, i32 0
%s37 = alloca i32, i32 0
%s38 = alloca i32, i32 0
%s39 = alloca i32, i32 0
%s40 = alloca i32, i32 0
%s41 = alloca i32, i32 0
%s42 = alloca i32, i32 0
%s43 = alloca i32, i32 0
%s44 = alloca i32, i32 0
%s45 = alloca i32, i32 0
%s46 = alloca i32, i32 0
%s47 = alloca i32, i32 0
%s48 = alloca i32, i32 0
%s49 = alloca i32, i32 0
%w0 = getelementptr [10 x i8], [10 x i8]* @.w0, i32 0, i32 0
call void @print(i8* %w0)
%t_1 = add i32 5, 0
store i32 %t_1, i32* %s0
br label %label_109
label_109:
%t_2 = trunc i32 1 to i1
br i1 %t_2, label %label_111, label %label_174
label_111:
%t_3 = load i32, i32* %s0
%t_4 = icmp eq i32 %t_3, 1
%t_5 = zext i1 %t_4 to i32
%t_6 = icmp ne i32 0, %t_5
br i1 %t_6, label %label_116, label %label_124
label_116:
call void @printNum(i32 1)
%t_7 = load i32, i32* %s0
%t_8 = sub i32 %t_7, 1

%t_9 = add i32 %t_8, 0
store i32 %t_9, i32* %s0
br label %label_174
br label %label_124
label_124:
%t_10 = load i32, i32* %s0
%t_11 = icmp eq i32 %t_10, 2
%t_12 = zext i1 %t_11 to i32
%t_13 = icmp ne i32 0, %t_12
br i1 %t_13, label %label_129, label %label_136
label_129:
call void @printNum(i32 2)
%t_14 = load i32, i32* %s0
%t_15 = sub i32 %t_14, 1

%t_16 = add i32 %t_15, 0
store i32 %t_16, i32* %s0
br label %label_136
label_136:
%t_17 = load i32, i32* %s0
%t_18 = icmp eq i32 %t_17, 3
%t_19 = zext i1 %t_18 to i32
%t_20 = icmp ne i32 0, %t_19
br i1 %t_20, label %label_141, label %label_148
label_141:
call void @printNum(i32 3)
%t_21 = load i32, i32* %s0
%t_22 = sub i32 %t_21, 1

%t_23 = add i32 %t_22, 0
store i32 %t_23, i32* %s0
br label %label_148
label_148:
%t_24 = load i32, i32* %s0
%t_25 = icmp eq i32 %t_24, 4
%t_26 = zext i1 %t_25 to i32
%t_27 = icmp ne i32 0, %t_26
br i1 %t_27, label %label_153, label %label_160
label_153:
call void @printNum(i32 4)
%t_28 = load i32, i32* %s0
%t_29 = sub i32 %t_28, 1

%t_30 = add i32 %t_29, 0
store i32 %t_30, i32* %s0
br label %label_160
label_160:
%t_31 = load i32, i32* %s0
%t_32 = icmp eq i32 %t_31, 5
%t_33 = zext i1 %t_32 to i32
%t_34 = icmp ne i32 0, %t_33
br i1 %t_34, label %label_165, label %label_172
label_165:
call void @printNum(i32 5)
%t_35 = load i32, i32* %s0
%t_36 = sub i32 %t_35, 1

%t_37 = add i32 %t_36, 0
store i32 %t_37, i32* %s0
br label %label_172
label_172:
br label %label_109
label_174:
%w1 = getelementptr [11 x i8], [11 x i8]* @.w1, i32 0, i32 0
call void @print(i8* %w1)
%t_38 = trunc i32 5 to i8
%t_39 = zext i8 %t_38 to i32
store i32 %t_39, i32* %s1
br label %label_179
label_179:
%t_40 = trunc i32 1 to i1
br i1 %t_40, label %label_181, label %label_244
label_181:
%t_41 = load i32, i32* %s1
%t_42 = icmp eq i32 %t_41, 1
%t_43 = zext i1 %t_42 to i32
%t_44 = icmp ne i32 0, %t_43
br i1 %t_44, label %label_186, label %label_194
label_186:
call void @printNum(i32 1)
%t_45 = load i32, i32* %s1
%t_46 = sub i32 %t_45, 1
%t_47 = trunc i32 %t_46 to i8
%t_48 = zext i8 %t_47 to i32
%t_49 = trunc i32 %t_48 to i8
%t_50 = zext i8 %t_49 to i32
store i32 %t_50, i32* %s1
br label %label_244
br label %label_194
label_194:
%t_51 = load i32, i32* %s1
%t_52 = icmp eq i32 %t_51, 2
%t_53 = zext i1 %t_52 to i32
%t_54 = icmp ne i32 0, %t_53
br i1 %t_54, label %label_199, label %label_206
label_199:
call void @printNum(i32 2)
%t_55 = load i32, i32* %s1
%t_56 = sub i32 %t_55, 1
%t_57 = trunc i32 %t_56 to i8
%t_58 = zext i8 %t_57 to i32
%t_59 = trunc i32 %t_58 to i8
%t_60 = zext i8 %t_59 to i32
store i32 %t_60, i32* %s1
br label %label_206
label_206:
%t_61 = load i32, i32* %s1
%t_62 = icmp eq i32 %t_61, 3
%t_63 = zext i1 %t_62 to i32
%t_64 = icmp ne i32 0, %t_63
br i1 %t_64, label %label_211, label %label_218
label_211:
call void @printNum(i32 3)
%t_65 = load i32, i32* %s1
%t_66 = sub i32 %t_65, 1
%t_67 = trunc i32 %t_66 to i8
%t_68 = zext i8 %t_67 to i32
%t_69 = trunc i32 %t_68 to i8
%t_70 = zext i8 %t_69 to i32
store i32 %t_70, i32* %s1
br label %label_218
label_218:
%t_71 = load i32, i32* %s1
%t_72 = icmp eq i32 %t_71, 4
%t_73 = zext i1 %t_72 to i32
%t_74 = icmp ne i32 0, %t_73
br i1 %t_74, label %label_223, label %label_230
label_223:
call void @printNum(i32 4)
%t_75 = load i32, i32* %s1
%t_76 = sub i32 %t_75, 1
%t_77 = trunc i32 %t_76 to i8
%t_78 = zext i8 %t_77 to i32
%t_79 = trunc i32 %t_78 to i8
%t_80 = zext i8 %t_79 to i32
store i32 %t_80, i32* %s1
br label %label_230
label_230:
%t_81 = load i32, i32* %s1
%t_82 = icmp eq i32 %t_81, 5
%t_83 = zext i1 %t_82 to i32
%t_84 = icmp ne i32 0, %t_83
br i1 %t_84, label %label_235, label %label_242
label_235:
call void @printNum(i32 5)
%t_85 = load i32, i32* %s1
%t_86 = sub i32 %t_85, 1
%t_87 = trunc i32 %t_86 to i8
%t_88 = zext i8 %t_87 to i32
%t_89 = trunc i32 %t_88 to i8
%t_90 = zext i8 %t_89 to i32
store i32 %t_90, i32* %s1
br label %label_242
label_242:
br label %label_179
label_244:
ret void
}

