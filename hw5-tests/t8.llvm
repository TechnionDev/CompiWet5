==RELOPNONASSOC==
==
==id==
==num==
==dani==
hiiiiiiiiiiiiii
this is first exp type: INT
this is second exp type: INT
==string==
++++++++++
==if statement==
==func decl==
==num==
++++++++++
==RELOPNONASSOC==
==
==num==
==num==
==dani==
hiiiiiiiiiiiiii
this is first exp type: INT
this is second exp type: INT
==RELOPNONASSOC==
==
==num==
==num==
==dani==
hiiiiiiiiiiiiii
this is first exp type: INT
this is second exp type: INT
==string==
++++++++++
==if statement==
==if statement==
==RELOPNONASSOC==
==
==num==
==num==
==dani==
hiiiiiiiiiiiiii
this is first exp type: INT
this is second exp type: INT
==num==
==RELOPNONASSOC==
==
==num==
==num==
==dani==
hiiiiiiiiiiiiii
this is first exp type: INT
this is second exp type: INT
==string==
++++++++++
==if statement==
==num==
==if statement==
==true==
==id==
==string==
++++++++++
==if statement==
==true==
==string==
++++++++++
==if statement==
==true==
==true==
==string==
++++++++++
==string==
++++++++++
==true==
==string==
++++++++++
==string==
++++++++++
==true==
==false==
==string==
++++++++++
==string==
++++++++++
==if statement==
==func decl==
==end of program==
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
@.zerodiverrorstring  = constant [23 x i8] c"Error division by zero\00"

define void @printi(i32) {
%spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
ret void
}

define void @print(i8*) {
%spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
ret void
}

define void @checkDiv(i32) {
%divcmp = icmp eq i32 %0, 0
br i1 %divcmp, label %EqualZero, label %notEqualZero
EqualZero:
%div_error_str = getelementptr [23 x i8], [23 x i8]* @.zerodiverrorstring, i32 0, i32 0
call void @print(i8* %div_error_str)
call void @exit(i32 -1)
ret void
notEqualZero:
ret void
}

@.w0 = constant [5 x i8]c"ok11\00"
@.w1 = constant [4 x i8]c"ok1\00"
@.w2 = constant [4 x i8]c"ok2\00"
@.w3 = constant [4 x i8]c"ok3\00"
@.w4 = constant [4 x i8]c"ok4\00"
@.w5 = constant [4 x i8]c"ok5\00"
@.w6 = constant [4 x i8]c"ok6\00"
@.w7 = constant [8 x i8]c"not ok7\00"
@.w8 = constant [8 x i8]c"not ok8\00"
@.w9 = constant [4 x i8]c"ok9\00"
@.w10 = constant [4 x i8]c"k10\00"
define void @test(i32) {
%s0 = alloca i32, i32 0
%s1 = alloca i32, i32 0
%s2 = alloca i32, i32 0
%s3 = alloca i32, i32 0
%s4 = alloca i32, i32 0
%s5 = alloca i32, i32 0
%s6 = alloca i32, i32 0
%s7 = alloca i32, i32 0
%s8 = alloca i32, i32 0
%s9 = alloca i32, i32 0
%s10 = alloca i32, i32 0
%s11 = alloca i32, i32 0
%s12 = alloca i32, i32 0
%s13 = alloca i32, i32 0
%s14 = alloca i32, i32 0
%s15 = alloca i32, i32 0
%s16 = alloca i32, i32 0
%s17 = alloca i32, i32 0
%s18 = alloca i32, i32 0
%s19 = alloca i32, i32 0
%s20 = alloca i32, i32 0
%s21 = alloca i32, i32 0
%s22 = alloca i32, i32 0
%s23 = alloca i32, i32 0
%s24 = alloca i32, i32 0
%s25 = alloca i32, i32 0
%s26 = alloca i32, i32 0
%s27 = alloca i32, i32 0
%s28 = alloca i32, i32 0
%s29 = alloca i32, i32 0
%s30 = alloca i32, i32 0
%s31 = alloca i32, i32 0
%s32 = alloca i32, i32 0
%s33 = alloca i32, i32 0
%s34 = alloca i32, i32 0
%s35 = alloca i32, i32 0
%s36 = alloca i32, i32 0
%s37 = alloca i32, i32 0
%s38 = alloca i32, i32 0
%s39 = alloca i32, i32 0
%s40 = alloca i32, i32 0
%s41 = alloca i32, i32 0
%s42 = alloca i32, i32 0
%s43 = alloca i32, i32 0
%s44 = alloca i32, i32 0
%s45 = alloca i32, i32 0
%s46 = alloca i32, i32 0
%s47 = alloca i32, i32 0
%s48 = alloca i32, i32 0
%s49 = alloca i32, i32 0
%t_1 = icmp eq i32 %0, 0
%t_2 = zext i1 %t_1 to i32
%t_3 = icmp ne i32 0, %t_2
br i1 %t_3, label %label_54, label %label_57
label_54:
%w0 = getelementptr [5 x i8], [5 x i8]* @.w0, i32 0, i32 0
call void @print(i8* %w0)
br label %label_57
label_57:
ret void
}

define void @main() {
%s0 = alloca i32, i32 0
%s1 = alloca i32, i32 0
%s2 = alloca i32, i32 0
%s3 = alloca i32, i32 0
%s4 = alloca i32, i32 0
%s5 = alloca i32, i32 0
%s6 = alloca i32, i32 0
%s7 = alloca i32, i32 0
%s8 = alloca i32, i32 0
%s9 = alloca i32, i32 0
%s10 = alloca i32, i32 0
%s11 = alloca i32, i32 0
%s12 = alloca i32, i32 0
%s13 = alloca i32, i32 0
%s14 = alloca i32, i32 0
%s15 = alloca i32, i32 0
%s16 = alloca i32, i32 0
%s17 = alloca i32, i32 0
%s18 = alloca i32, i32 0
%s19 = alloca i32, i32 0
%s20 = alloca i32, i32 0
%s21 = alloca i32, i32 0
%s22 = alloca i32, i32 0
%s23 = alloca i32, i32 0
%s24 = alloca i32, i32 0
%s25 = alloca i32, i32 0
%s26 = alloca i32, i32 0
%s27 = alloca i32, i32 0
%s28 = alloca i32, i32 0
%s29 = alloca i32, i32 0
%s30 = alloca i32, i32 0
%s31 = alloca i32, i32 0
%s32 = alloca i32, i32 0
%s33 = alloca i32, i32 0
%s34 = alloca i32, i32 0
%s35 = alloca i32, i32 0
%s36 = alloca i32, i32 0
%s37 = alloca i32, i32 0
%s38 = alloca i32, i32 0
%s39 = alloca i32, i32 0
%s40 = alloca i32, i32 0
%s41 = alloca i32, i32 0
%s42 = alloca i32, i32 0
%s43 = alloca i32, i32 0
%s44 = alloca i32, i32 0
%s45 = alloca i32, i32 0
%s46 = alloca i32, i32 0
%s47 = alloca i32, i32 0
%s48 = alloca i32, i32 0
%s49 = alloca i32, i32 0
call void @test(i32 0)
%t_4 = icmp eq i32 1, 1
%t_5 = zext i1 %t_4 to i32
%t_6 = icmp ne i32 0, %t_5
br i1 %t_6, label %label_115, label %label_124
label_115:
%t_7 = icmp eq i32 1, 1
%t_8 = zext i1 %t_7 to i32
%t_9 = icmp ne i32 0, %t_8
br i1 %t_9, label %label_119, label %label_122
label_119:
%w1 = getelementptr [4 x i8], [4 x i8]* @.w1, i32 0, i32 0
call void @print(i8* %w1)
br label %label_122
label_122:
br label %label_124
label_124:
%t_10 = icmp eq i32 1, 1
%t_11 = zext i1 %t_10 to i32
%t_12 = icmp ne i32 0, %t_11
br i1 %t_12, label %label_128, label %label_141
label_128:
%t_13 = add i32 0, 0
store i32 %t_13, i32* %s0
%t_14 = icmp eq i32 1, 1
%t_15 = zext i1 %t_14 to i32
%t_16 = icmp ne i32 0, %t_15
br i1 %t_16, label %label_134, label %label_137
label_134:
%w2 = getelementptr [4 x i8], [4 x i8]* @.w2, i32 0, i32 0
call void @print(i8* %w2)
br label %label_137
label_137:
%t_17 = add i32 0, 0
store i32 %t_17, i32* %s1
br label %label_141
label_141:
%t_18 = add i32 0, 1
store i32 %t_18, i32* %s0
%t_19 = load i32, i32* %s0
%t_20 = icmp ne i32 0, %t_19
br i1 %t_20, label %label_147, label %label_150
label_147:
%w3 = getelementptr [4 x i8], [4 x i8]* @.w3, i32 0, i32 0
call void @print(i8* %w3)
br label %label_150
label_150:
%t_21 = icmp ne i32 0, 1
br i1 %t_21, label %label_153, label %label_156
label_153:
%w4 = getelementptr [4 x i8], [4 x i8]* @.w4, i32 0, i32 0
call void @print(i8* %w4)
br label %label_156
label_156:
%t_22 = icmp ne i32 0, 1
br i1 %t_22, label %label_159, label %label_172
label_159:
%t_23 = icmp ne i32 0, 1
br i1 %t_23, label %label_162, label %label_166
label_162:
%w5 = getelementptr [4 x i8], [4 x i8]* @.w5, i32 0, i32 0
call void @print(i8* %w5)
br label %label_169
br label %label_166
label_166:
%w6 = getelementptr [4 x i8], [4 x i8]* @.w6, i32 0, i32 0
call void @print(i8* %w6)
br label %label_169
label_169:
br label %label_184
br label %label_172
label_172:
%t_24 = icmp ne i32 0, 1
br i1 %t_24, label %label_175, label %label_179
label_175:
%w7 = getelementptr [8 x i8], [8 x i8]* @.w7, i32 0, i32 0
call void @print(i8* %w7)
br label %label_182
br label %label_179
label_179:
%w8 = getelementptr [8 x i8], [8 x i8]* @.w8, i32 0, i32 0
call void @print(i8* %w8)
br label %label_182
label_182:
br label %label_184
label_184:
%t_25 = icmp ne i32 0, 1
br i1 %t_25, label %label_187, label %label_199
label_187:
%t_26 = icmp ne i32 0, 0
br i1 %t_26, label %label_190, label %label_194
label_190:
%w9 = getelementptr [4 x i8], [4 x i8]* @.w9, i32 0, i32 0
call void @print(i8* %w9)
br label %label_197
br label %label_194
label_194:
%w10 = getelementptr [4 x i8], [4 x i8]* @.w10, i32 0, i32 0
call void @print(i8* %w10)
br label %label_197
label_197:
br label %label_199
label_199:
ret void
ret void
}

