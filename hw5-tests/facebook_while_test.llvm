==id==
==string==
++++++++++
==id==
++++++++++
==RELOPLEFT==
==id==
==num==
==bondar==
hiiiiiiiiiiiiii
this is first exp type: INT
this is second exp type: INT
==id==
++++++++++
==id==
==num==
==minus==
hiiiiiiiiiiiiii
!!!!!label_57!!!!!
==string==
++++++++++
==func decl==
==num==
++++++++++
==num==
++++++++++
==string==
++++++++++
==num b==
==num b==
==plus==
hiiiiiiiiiiiiii
==id==
++++++++++
==num b==
==num b==
==mult==
hiiiiiiiiiiiiii
==id==
++++++++++
==func decl==
==end of program==
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
@.zerodiverrorstring  = constant [23 x i8] c"Error division by zero\00"

define void @printi(i32) {
%spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
ret void
}

define void @print(i8*) {
%spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
ret void
}

define void @checkDiv(i32) {
%divcmp = icmp eq i32 %0, 0
br i1 %divcmp, label %EqualZero, label %notEqualZero
EqualZero:
%div_error_str = getelementptr [23 x i8], [23 x i8]* @.zerodiverrorstring, i32 0, i32 0
call void @print(i8* %div_error_str)
call void @exit(i32 -1)
ret void
notEqualZero:
ret void
}

@.w0 = constant [27 x i8]c"Printing number from 0 to \00"
@.w1 = constant [15 x i8]c"Printing done!\00"
@.w2 = constant [48 x i8]c"Byte test - testing addition and multiplication\00"
define void @printer(i32) {
%s0 = alloca i32, i32 0
%s1 = alloca i32, i32 0
%s2 = alloca i32, i32 0
%s3 = alloca i32, i32 0
%s4 = alloca i32, i32 0
%s5 = alloca i32, i32 0
%s6 = alloca i32, i32 0
%s7 = alloca i32, i32 0
%s8 = alloca i32, i32 0
%s9 = alloca i32, i32 0
%s10 = alloca i32, i32 0
%s11 = alloca i32, i32 0
%s12 = alloca i32, i32 0
%s13 = alloca i32, i32 0
%s14 = alloca i32, i32 0
%s15 = alloca i32, i32 0
%s16 = alloca i32, i32 0
%s17 = alloca i32, i32 0
%s18 = alloca i32, i32 0
%s19 = alloca i32, i32 0
%s20 = alloca i32, i32 0
%s21 = alloca i32, i32 0
%s22 = alloca i32, i32 0
%s23 = alloca i32, i32 0
%s24 = alloca i32, i32 0
%s25 = alloca i32, i32 0
%s26 = alloca i32, i32 0
%s27 = alloca i32, i32 0
%s28 = alloca i32, i32 0
%s29 = alloca i32, i32 0
%s30 = alloca i32, i32 0
%s31 = alloca i32, i32 0
%s32 = alloca i32, i32 0
%s33 = alloca i32, i32 0
%s34 = alloca i32, i32 0
%s35 = alloca i32, i32 0
%s36 = alloca i32, i32 0
%s37 = alloca i32, i32 0
%s38 = alloca i32, i32 0
%s39 = alloca i32, i32 0
%s40 = alloca i32, i32 0
%s41 = alloca i32, i32 0
%s42 = alloca i32, i32 0
%s43 = alloca i32, i32 0
%s44 = alloca i32, i32 0
%s45 = alloca i32, i32 0
%s46 = alloca i32, i32 0
%s47 = alloca i32, i32 0
%s48 = alloca i32, i32 0
%s49 = alloca i32, i32 0
%t_1 = add i32 %0, 0
store i32 %t_1, i32* %s0
%w0 = getelementptr [27 x i8], [27 x i8]* @.w0, i32 0, i32 0
call void @print(i8* %w0)
%t_2 = load i32, i32* %s0
call void @printi(i32 %t_2)
br label %label_57
label_57:
%t_3 = load i32, i32* %s0
%t_4 = icmp sge i32 %t_3, 0
%t_5 = zext i1 %t_4 to i32
%t_6 = trunc i32 %t_5 to i1
br i1 %t_6, label %label_61, label %label_73
label_61:
%t_7 = add i32 0, 0
store i32 %t_7, i32* %s1
%t_8 = add i32 0, 0
store i32 %t_8, i32* %s2
%t_9 = load i32, i32* %s0
call void @printi(i32 %t_9)
%t_10 = load i32, i32* %s0
%t_11 = sub i32 %t_10, 1

%t_12 = add i32 %t_11, 0
store i32 %t_12, i32* %s0
br label %label_57
label_73:
%w1 = getelementptr [15 x i8], [15 x i8]* @.w1, i32 0, i32 0
call void @print(i8* %w1)
ret void
}

define void @main() {
%s0 = alloca i32, i32 0
%s1 = alloca i32, i32 0
%s2 = alloca i32, i32 0
%s3 = alloca i32, i32 0
%s4 = alloca i32, i32 0
%s5 = alloca i32, i32 0
%s6 = alloca i32, i32 0
%s7 = alloca i32, i32 0
%s8 = alloca i32, i32 0
%s9 = alloca i32, i32 0
%s10 = alloca i32, i32 0
%s11 = alloca i32, i32 0
%s12 = alloca i32, i32 0
%s13 = alloca i32, i32 0
%s14 = alloca i32, i32 0
%s15 = alloca i32, i32 0
%s16 = alloca i32, i32 0
%s17 = alloca i32, i32 0
%s18 = alloca i32, i32 0
%s19 = alloca i32, i32 0
%s20 = alloca i32, i32 0
%s21 = alloca i32, i32 0
%s22 = alloca i32, i32 0
%s23 = alloca i32, i32 0
%s24 = alloca i32, i32 0
%s25 = alloca i32, i32 0
%s26 = alloca i32, i32 0
%s27 = alloca i32, i32 0
%s28 = alloca i32, i32 0
%s29 = alloca i32, i32 0
%s30 = alloca i32, i32 0
%s31 = alloca i32, i32 0
%s32 = alloca i32, i32 0
%s33 = alloca i32, i32 0
%s34 = alloca i32, i32 0
%s35 = alloca i32, i32 0
%s36 = alloca i32, i32 0
%s37 = alloca i32, i32 0
%s38 = alloca i32, i32 0
%s39 = alloca i32, i32 0
%s40 = alloca i32, i32 0
%s41 = alloca i32, i32 0
%s42 = alloca i32, i32 0
%s43 = alloca i32, i32 0
%s44 = alloca i32, i32 0
%s45 = alloca i32, i32 0
%s46 = alloca i32, i32 0
%s47 = alloca i32, i32 0
%s48 = alloca i32, i32 0
%s49 = alloca i32, i32 0
call void @printer(i32 5)
call void @printer(i32 10)
%w2 = getelementptr [48 x i8], [48 x i8]* @.w2, i32 0, i32 0
call void @print(i8* %w2)
%t_13 = add i32 150, 150
%t_14 = trunc i32 %t_13 to i8
%t_15 = zext i8 %t_14 to i32
%t_16 = trunc i32 %t_15 to i8
%t_17 = zext i8 %t_16 to i32
store i32 %t_17, i32* %s0
%t_18 = load i32, i32* %s0
call void @printi(i32 %t_18)
%t_19 = mul i32 130, 2
%t_20 = trunc i32 %t_19 to i8
%t_21 = zext i8 %t_20 to i32
%t_22 = trunc i32 %t_21 to i8
%t_23 = zext i8 %t_22 to i32
store i32 %t_23, i32* %s0
%t_24 = load i32, i32* %s0
call void @printi(i32 %t_24)
ret void
}

