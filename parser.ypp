%{
    #include <iostream>
    #include "hw3_output.hpp"
    #include "Semantics.h"
    #include "register.h"
    #include "bp.hpp"
    using namespace std;
    int yylex();
    extern int yylineno;
    extern std::string curFuncName;
    extern char *yytext;
    void yyerror(const char* err);

    CodeBuffer& buffer = CodeBuffer::instance();
    extern RegisterManager registerManager;
%}

%nonassoc VOID;
%nonassoc INT;
%nonassoc BYTE;
%nonassoc B;
%nonassoc BOOL;
%nonassoc CONST;
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;
%nonassoc WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%nonassoc SC;
%nonassoc COMMA;
%nonassoc LBRACE;
%nonassoc RBRACE;
%nonassoc ID;
%nonassoc NUM;
%nonassoc STRING;
%left LPAREN;
%left RPAREN;
%right NOT;
%left MULT;
%left DIV;
%left PLUS;
%left MINUS;
%nonassoc RELOPNONASSOC;
%left RELOPLEFT;
%left AND;
%left OR;
%right IF;
%left ELSE;
%right ASSIGN;

%%
program: m_glob funcs {$$ = new program();};

funcs: /*epsilon*/{$$ = new funcs();};|
        funcDecl funcs {$$ = new funcs();};

funcDecl: retType ID {curFuncName = $2->val;} m_funcNewScope LPAREN formals RPAREN LBRACE {addFunction(dynamic_cast<retType*>($1), $2, dynamic_cast<formals*>($6));} statements RBRACE{$$ = new funcDecl(
                                                                                    dynamic_cast<retType*>($1),
                                                                                    $2,
                                                                                    dynamic_cast<formals*>($6),
                                                                                    dynamic_cast<statements*>($10));
                                                                                    };

retType: type{$$ = new retType(dynamic_cast<type*>($1));};
        |VOID{$$ = new retType($1);};

formals: /*epsilon*/{$$ = new formals();};
	|formalsList{$$ = new formals(dynamic_cast<formalsList*>($1));};

formalsList: formalDecl{$$ = new formalsList(dynamic_cast<formalsDecl*>($1));};
	|formalDecl COMMA formalsList{$$ = new formalsList(dynamic_cast<formalsDecl*>($1), dynamic_cast<formalsList*>($3));};

formalDecl: typeAnnotation type ID{$$ = new formalsDecl(dynamic_cast<typeAnnotation*>($1)
                                                        ,dynamic_cast<type*>($2),
                                                        $3);};

statements: statement{$$ = new statements(dynamic_cast<statement*>($1));}
	|statements statement{$$ = new statements(dynamic_cast<statements*>($1), dynamic_cast<statement*>($2));};

statement: LBRACE m_newScope statements RBRACE{$$ = new statement(dynamic_cast<statements*>($3));} //TODO - Maybe we need to perform the m_nesScope() function here
	|typeAnnotation type ID SC{$$ = new statement(dynamic_cast<typeAnnotation*>($1),
                                                        dynamic_cast<type*>($2),
                                                        $3);}
	|typeAnnotation type ID ASSIGN exp SC{$$ = new statement(dynamic_cast<typeAnnotation*>($1),
                                                                   dynamic_cast<type*>($2),
                                                                   $3,dynamic_cast<exp*>($5));}
	|ID ASSIGN exp SC{$$ = new statement($1, "ASSIGN", dynamic_cast<exp*>($3));}
	|call SC{$$ = new statement(dynamic_cast<call*>($1));}
	|RETURN SC{$$ = new statement($1);}
	|RETURN exp SC{$$ = new statement($1, dynamic_cast<exp*>($2));}
	|IF LPAREN m_newScope ifExp RPAREN statement {$$ = new statement("IF",
                                                                    dynamic_cast<exp*>($4),
                                                                    dynamic_cast<statement*>($6),
                                                                    $1->lineNum);}
	|IF LPAREN m_newScope ifExp RPAREN statement ELSE m_elseEndScope m_newScope statement{$$ = new statement("IF",
                                                                                                            dynamic_cast<exp*>($4),
                                                                                                            dynamic_cast<statement*>($6),
                                                                                                            "ELSE",
                                                                                                            dynamic_cast<statement*>($10),
                                                                                                            $1->lineNum);
                                                                                                            $4->backPatchIf($8->nextInstruction);
                                                                                                            buffer.bpatch($8->nextList, buffer.genLabelNextLine());
                                                                                                            }
    |WHILE m_newScopeWhile LPAREN exp RPAREN statement{$$ = new statement("WHILE",
                                                                         dynamic_cast<exp*>($4),
                                                                         dynamic_cast<statement*>($6),
                                                                         $1->lineNum);
                                                       $6->endWhile($2->nextInstruction,dynamic_cast<exp*>($4));};
	|BREAK SC{$$ = new statement($1);}
	|CONTINUE SC{$$ = new statement($1);};

ifExp: exp {$1->loadExp();$1->ifCode();$1->nextInstruction = buffer.genLabel();$$ = new exp(dynamic_cast<exp*>($1));}

call: ID LPAREN expList RPAREN{$$ = new call($1, dynamic_cast<expList*>($3));};
	|ID LPAREN RPAREN{$$ = new call($1);};

expList: exp{$1->loadExp();$$ = new expList(dynamic_cast<exp*>($1));};
	|exp COMMA expList{$1->loadExp();$$ = new expList(dynamic_cast<exp*>($1),dynamic_cast<expList*>($3));};

type: INT{$$ = new type($1);};
	|BYTE{$$ = new type($1);};
	|BOOL{$$ = new type($1);};

typeAnnotation: /*epsilon*/{$$ = new typeAnnotation();};
		|CONST{$$ = new typeAnnotation($1);};


exp: LPAREN exp RPAREN{$2->loadExp();$$ = new exp(dynamic_cast<exp*>($2));};
	|exp MULT exp{buffer.emit(registerManager.createArithmeticOp(dynamic_cast<exp*>($1), dynamic_cast<exp*>($3), "MULT"));$$ = new exp(dynamic_cast<exp*>($1), "MULT", dynamic_cast<exp*>($3),$2->lineNum);$$->NodeRegister = registerManager.getCurrentRegisterName();};
	|exp DIV exp{buffer.emit(registerManager.createArithmeticOp(dynamic_cast<exp*>($1), dynamic_cast<exp*>($3), "DIV"));$$ = new exp(dynamic_cast<exp*>($1), "DIV", dynamic_cast<exp*>($3),$2->lineNum);$$->NodeRegister = registerManager.getCurrentRegisterName();};
	|exp PLUS exp{buffer.emit(registerManager.createArithmeticOp(dynamic_cast<exp*>($1), dynamic_cast<exp*>($3), "PLUS"));$$ = new exp(dynamic_cast<exp*>($1), "PLUS", dynamic_cast<exp*>($3),$2->lineNum);$$->NodeRegister = registerManager.getCurrentRegisterName();};
	|exp MINUS exp{buffer.emit(registerManager.createArithmeticOp(dynamic_cast<exp*>($1), dynamic_cast<exp*>($3), "MINUS"));$$ = new exp(dynamic_cast<exp*>($1), "MINUS", dynamic_cast<exp*>($3),$2->lineNum);$$->NodeRegister = registerManager.getCurrentRegisterName();};
	|ID{$$ = new exp($1,"ID");$$->NodeRegister = registerManager.getVarRegister($$->NodeId, $$->NodeRegister);};
	|call{$$ = new exp(dynamic_cast<call*>($1));};
	|NUM{$$ = new exp($1, 0, false);};
	|NUM B{$$ = new exp($1, 0, true);};
	|STRING{$$ = new exp($1,"STRING");};
	|TRUE{$$ = new exp(true);};
	|FALSE{$$ = new exp(false);};
	|NOT exp{$$ = new exp("NOT", dynamic_cast<exp*>($2),$1->lineNum);};
	|exp AND BoolMarkerM exp{$$ = new exp(dynamic_cast<exp*>($1), "AND", dynamic_cast<exp*>($4),$2->lineNum,dynamic_cast<Marker*>($3));};
	|exp OR BoolMarkerM exp{$$ = new exp(dynamic_cast<exp*>($1), "OR", dynamic_cast<exp*>($4),$2->lineNum,dynamic_cast<Marker*>($3));};
	|exp RELOPNONASSOC exp{$$ = new exp(dynamic_cast<exp*>($1), $2->val, dynamic_cast<exp*>($3),$2->lineNum);};
	|exp RELOPLEFT exp{$$ = new exp(dynamic_cast<exp*>($1), $2->val, dynamic_cast<exp*>($3),$2->lineNum);};
	|LPAREN typeAnnotation type RPAREN exp{$$ = new exp(dynamic_cast<typeAnnotation*>($2), dynamic_cast<type*>($3), dynamic_cast<exp*>($5),$1->lineNum);};

BoolMarkerM: /* epsilon */ {$$ = new Marker();}

m_glob: /*epsilon*/     {m_glob();};

m_funcNewScope: /*epsilon*/ {curFuncName = yytext;m_newScope();};

m_newScope: /*epsilon*/ {m_newScope();};

m_newScopeWhile: /*epsilon*/    {m_newScopeWhile();$$ = new Node(); $$->nextInstruction = buffer.genLabelNextLine();};

m_elseEndScope: /*epsilon*/         {m_endScope();$$ = new Node(); $$->elseCode();};
%%

void yyerror (const char* err) {
    output::errorSyn(yylineno);
    exit(0);
}
int main() {
    buffer.startProgram();
    yyparse();
    buffer.printGlobalBuffer();
    buffer.printCodeBuffer();
    return 0;
}
